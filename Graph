#include <bits/stdc++.h>

using namespace std;

void DFS(int node,vector<int>adj[], vector<int>&vis){ 
    vis[node]=1;
    cout<<node<<endl;
    for(auto it:adj[node]){
        if(!vis[it]){
            DFS(it,adj,vis);
        }
    }
}

void BFS(int node,vector<int>adj[],vector<int>&vis){
    queue<int>q;
    q.push(node); //push 0 and insert the neighbouring values of that front of queue and pop that and push into a vector
    vis[node]=1;
    while(!q.empty()){
        node=q.front();
        cout<<node<<" ";
        q.pop();
        for(auto it:adj[node]){   //go to that particular adjacency vectpr if not visisted then push into vector
            if(!vis[it]){
                q.push(it);
                vis[it]=1;
            }
        }
    }
}

int main()
{
    //READING INPUT OF GRAPH
    
    //METHOD 1
    //1st one matrix means 2d array
    
    // int N,E;
    // int u,v;
    // cin>>N>>E;
    // int matrix[N+1][N+1];
    // for(int i=0;i<E;i++){
    //     cin>>u>>v;
    //     matrix[u][v]=1;
    //     matrix[v][u]=1;
    // }
    
    //METHOD 2
    //Adjacency list
    
    int N,E;
    cin>>N>>E;
    vector<int>adj[N+1];
    int u,v;
    for(int i=0;i<E;i++){
    cin>>u>>v;
    adj[u].push_back(v);
    adj[v].push_back(u);
    }
    
    vector<int>vis(N,0);
    DFS(1,adj,vis);
    //BFS(1,adj,vis); 
}

input:
5 7
1 2
1 4
1 3
2 4
2 5
3 4
2 5
o/p:
1 2 4 3 5
